# This workflow will create and push a new container image to Amazon ECR,
# and then deploy a new task definition to Amazon ECS, when a version is created

name: Continuous Integration/Continuous Deployment
on: [push]
# on:
#   push:
#      branches:
#       - main 
#   workflow_run:
#     workflows: ["Continuous Training"]
#     branches: [main]
#     types:
#       - completed
#   workflow_dispatch:
#     inputs:
#       reason:
#         description: Why to run this?
#         required: false
#         default: running CI/CD
#These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write # need this for OIDC  
  contents: write
  pull-requests: write 
  issues: read
  packages: none
jobs:
  ci_cd:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}         # set this to your Amazon ECR registry
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}     # set this to your Amazon ECR repository name
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-session-name: aws_CI_CD_session
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment and bring the model
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install          
          pip install dvc[s3]
          pipenv run dvc pull model/model.pkl.dvc -r model-track

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --no-cache --platform="linux/amd64" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT          
      # - name: Download task definition
      #   run: |
      #       aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query taskDefinition | jq -r 'del(
      #         .taskDefinitionArn,
      #         .requiresAttributes,
      #         .compatibilities,
      #         .revision,
      #         .status,
      #         .registeredAt,
      #         .registeredBy
      #       )' > task-definition.json
          
      # - name: Render Amazon ECS task definition
      #   id: render-task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ${{ secrets.ECS_CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}
      #     environment-variables: "LOG_LEVEL=info"

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.render-task-def.outputs.task-definition }}
      #     service: ${{ secrets.ECS_SERVICE }}
      #     cluster: ${{ secrets.ECS_CLUSTER }}
      #     wait-for-service-stability: true

